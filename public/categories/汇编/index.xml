<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>汇编 on Messiz Blog</title>
        <link>http://localhost:1313/categories/%E6%B1%87%E7%BC%96/</link>
        <description>Recent content in 汇编 on Messiz Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Messiz</copyright>
        <lastBuildDate>Sun, 09 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/%E6%B1%87%E7%BC%96/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ATT汇编中mov指令</title>
        <link>http://localhost:1313/p/att%E6%B1%87%E7%BC%96%E4%B8%ADmov%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/att%E6%B1%87%E7%BC%96%E4%B8%ADmov%E6%8C%87%E4%BB%A4/</guid>
        <description>&lt;p&gt;mov语句简介&lt;br&gt;
&lt;br&gt;
mov指令用来实现数据的移动，一般后面会跟有两个操作数：源和目标&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;movq %rax, %rsi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在ATT格式的汇编代码中，前者为源，后者为目标，因此上述语句实现的是将%rax寄存器的内容传送到%rsi寄存器中。&lt;/p&gt;
&lt;p&gt;操作数及类型对应的值&lt;br&gt;
&lt;br&gt;
有三种类型的操作数，分别为： - 立即数（immediate）：$0x1F -
寄存器（register） - 内存引用&lt;/p&gt;
&lt;p&gt;寻址模式为：&lt;br&gt;
Imm(r&lt;del&gt;b&lt;/del&gt;，r&lt;del&gt;i&lt;/del&gt;，s)&lt;/p&gt;
&lt;p&gt;其中，Imm代表立即数，r&lt;del&gt;b&lt;/del&gt;代表基址寄存器，r&lt;del&gt;i&lt;/del&gt;代表变址寄存器，s是比例系数。&lt;br&gt;
则操作数的值为：&lt;/p&gt;
&lt;p&gt;M（Imm + r&lt;del&gt;b&lt;/del&gt; 的值 + r&lt;del&gt;i&lt;/del&gt;的值 * s）&lt;/p&gt;
&lt;p&gt;其中M表示括号里的值对应的地址。&lt;/p&gt;
&lt;p&gt;数据传送指令&lt;br&gt;
\&lt;/p&gt;
&lt;p&gt;指令       描述&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;MOV S, D   传送(S-&amp;gt;D)
movb       传送字节
movw       传送字（两字节）
movl       传送双字（四字节）
movq       传送四字（八字节）
movabsq    传送绝对的四字&lt;/p&gt;
&lt;p&gt;注意点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;movl指令以64位的寄存器为目标时，会自动将高32位（四字节）设置为0&lt;/li&gt;
&lt;li&gt;其余语句均只改变其传送数据的字节，而不会补0，或进行符号扩展&lt;/li&gt;
&lt;li&gt;movq语句实际上并不能传送64位，而只能传送32位，其高32位由低32位数据符号扩展而来&lt;/li&gt;
&lt;li&gt;movabsq指令才能传送64位数据，但要注意，只能以寄存器为目标操作数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;0扩展指令：&lt;/p&gt;
&lt;p&gt;指令        描述&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;MOVZ S, D   零扩展传送(S-&amp;gt;D)
movzbw      b-&amp;gt;w
movzbl      b-&amp;gt;l
movzbq      b-&amp;gt;q
movzwl      w-&amp;gt;l
movzwq      w-&amp;gt;q&lt;/p&gt;
&lt;p&gt;上述指令中缺少了&amp;quot;movzlq&amp;quot;，但实际上并不需要，因为上面说到过，movl指令本身就实现了这个功能。&lt;/p&gt;
&lt;p&gt;符号扩展：&lt;/p&gt;
&lt;p&gt;指令        描述&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;MOVS S, D   符号扩展传送(S-&amp;gt;D)
movsbw      b-&amp;gt;w
movsbl      b-&amp;gt;l
movsbq      b-&amp;gt;q
movswl      w-&amp;gt;l
movswq      w-&amp;gt;q
movslq      l-&amp;gt;q
cltq        把%eax符号扩展到%rax&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上述零扩展和符号扩展指令源操作数为寄存器或内存地址，目标操作数为寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判断mov指令后缀的方法&lt;br&gt;
\&lt;/p&gt;
&lt;p&gt;优先级按照以下几条规定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有寄存器按照寄存器大小&lt;/li&gt;
&lt;li&gt;两个操作数都是寄存器则按照目标寄存器&lt;/li&gt;
&lt;li&gt;其次是立即数大小&lt;/li&gt;
&lt;li&gt;内存地址优先级最低&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;终于总结完了&lt;br&gt;
累~&lt;/p&gt;
&lt;p&gt;END&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
